# _*_ coding:utf-8 _*_
import random
import re
import time
from socket import *


def get_bcc(inputStr: str) -> str:
    bcc = 0
    for i in inputStr.split(' '):
        bcc = bcc ^ int(i, 16)

    return f'{bcc:x}'


def get_xor(data):
    result = re.sub(r"(?<=\w)(?=(?:\w\w)+$)", " ", data)
    return result


"""
7E                   协议头
6021                 消息ID
L1 L2                 消息属性
013000008888         手机号
0005                 流水号
200608202135         时间2020年6月8号20点21分35秒
0003                 BMS协议版本指令
L3 L4                 L3 L4为BMS数据长度
02                   有2个TLV包
2802015E             TLV包，寄存器地址为0x28，数据长度为2，数据内容为350
29027530             TLV包，寄存器地址为0x29，数据长度为2，数据内容为7530
OR                   异或校验
7E                    协议尾
"""


def time16():
    ti = time.strftime("%Y%m%d%H%M%S")
    ti2 = str(ti)
    ti3 = 2 * '' + ti2[2:]
    ti4 = (hex(int(ti3[0:2]))[2:4]).zfill(2)
    ti5 = (hex(int(ti3[2:4]))[2:4]).zfill(2)
    ti6 = (hex(int(ti3[4:6]))[2:4]).zfill(2)
    ti7 = (hex(int(ti3[6:8]))[2:4]).zfill(2)
    ti8 = (hex(int(ti3[8:10]))[2:4]).zfill(2)
    ti9 = (hex(int(ti3[10:12]))[2:4]).zfill(2)
    ti10 = ti4 + ti5 + ti6 + ti7 + ti8 + ti9
    return ti10


# def bms():
协议头 = '7E'
消息ID = '6821'
手机号 = '13829622823'.zfill(12)
流水号 = '0001'
时间 = f"{time.strftime('%Y%m%d%H%M%S', time.localtime())[2:]}"
BMS协议版本指令 = '0004'
TLV包数 = '9F'
单体电池电压1 = '1A020DDE'
单体电池电压2 = '1C020DDE'
电池温度1 = '2102003C'
电池温度2 = '2502003C'
电池总电压 = '2802015E'
电流数据 = '29027580'
SOC = '2A020320'
最高单体电压 = f'2B02000{random.randint(1, 9)}'
最低单体电压 = f'2C02000{random.randint(1, 9)}'
最高单体温度 = '2D02003C'
最低单体温度 = '2E02003A'
充放电状态 = F'2F02000{random.randint(0, 2)}'
电池剩余容量 = f'300202{random.randint(1, 6)}4'
电池数量 = f'3102000{random.randint(1, 9)}'
电池温度传感器数量 = f'3202000{random.randint(1, 9)}'
电池使用循环次数 = f'3302000{random.randint(1, 9)}'
均衡状态 = f'3402000{random.randint(0, 1)}'
充电MOS状态 = f'3502000{random.randint(0, 1)}'
放电MOS状态 = f'3602000{random.randint(0, 1)}'
平均电压 = f'3702000{random.randint(1, 9)}'
压差 = f'3802000{random.randint(1, 9)}'
功率 = f'3902000{random.randint(1, 9)}'
故障状态1 = '3A022233'
故障状态2 = '3B023303'
故障状态3 = '3C020F84'
故障状态4 = '3D028507'
剩余里程 = f'3E02003{random.randint(1, 9)}'
主动均衡状态 = f'3F02000{random.randint(0, 1)}'
均衡电流 = f'4002758{random.randint(0, 3)}'
均衡位置 = f'410200{random.randint(1, 3)}E'
MOS温度 = '4202003C'
预留信号5 = f'4302000{random.randint(1, 9)}'
预留信号6 = f'4402000{random.randint(1, 9)}'
预留信号7 = f'4502000{random.randint(1, 9)}'
预留信号8 = f'4602000{random.randint(1, 9)}'
单体电池电压3 = f'4802{random.randint(1, 9)}E42'
单体电池电压4 = f'5502{random.randint(1, 9)}E42'
SN码1 = '57023332'
SN码2 = '58023130'
SN码3 = '59023938'
SN码4 = '5A023736'
SN码5 = '5B023534'
SN码6 = '5C023332'
SN码7 = '5D023133'
SN码8 = '5E023238'
SN码9 = '5F023232'
SN码10 = '60023639'
SN码11 = '61023238'
SN码12 = '62023331'
防盗状态 = f'6302000{random.randint(0, 1)}'
加热状态 = f'6402000{random.randint(0, 1)}'
充电年月 = f'6502{time16()[:4]}'
充电日时 = f'6602{time16()[4:8]}'
充电分秒 = f'6702{time16()[8:]}'
放电年月 = f'6802{time16()[:4]}'
放电日时 = f'6902{time16()[4:8]}'
放电分秒 = f'6A02{time16()[8:]}'
额定容量 = f'800200E{random.randint(1, 9)}'
单体基准电压 = f'8102000{random.randint(1, 9)}'
采集板个数 = f'82020006'
采集板1单体个数 = f'8302000{random.randint(1, 9)}'
采集板2单体个数 = f'8402000{random.randint(1, 9)}'
采集板3单体个数 = f'8502000{random.randint(1, 9)}'
采集板1温度个数 = f'8602000{random.randint(1, 9)}'
采集板2温度个数 = f'8702000{random.randint(1, 9)}'
采集板3温度个数 = f'8802000{random.randint(1, 9)}'
电池类型 = f'8902000{random.randint(0, 2)}'
休眠等待时间 = f'8A02000{random.randint(1, 9)}'
单体电压过高一级告警 = f'8B0200{random.randint(1, 3)}E'
单体电压过高二级告警 = f'8C0200{random.randint(1, 3)}E'
单体电压过低一级告警 = f'8D0200{random.randint(1, 3)}E'
单体电压过低二级告警 = f'8E0200{random.randint(1, 3)}E'
总压过高一级告警 = f'8F0200{random.randint(1, 3)}E'
总压过高二级告警 = f'900200{random.randint(1, 3)}E'
总压过低一级告警 = f'910200{random.randint(1, 3)}E'
总压过低二级告警 = f'920200{random.randint(1, 3)}E'
充电电流过高一级告警 = f'93020C0{random.randint(1, 3)}'
充电电流过高二级告警 = f'94020C0{random.randint(1, 3)}'
放电电流过高一级告警 = f'95020C0{random.randint(1, 3)}'
放电电流过高二级告警 = f'96020C0{random.randint(1, 3)}'
充电温度过高一级告警 = f'970200{random.randint(1, 3)}C'
充电温度过高二级告警 = f'980200{random.randint(7, 9)}C'
充电温度过低一级告警 = f'990200{random.randint(8, 9)}C'
充电温度过低二级告警 = f'9A0200{random.randint(7, 9)}C'
放电温度过高一级告警 = f'9B02006{random.randint(7, 9)}'
放电温度过高二级告警 = f'9C02006{random.randint(7, 9)}'
放电温度过低一级告警 = f'9D02006{random.randint(7, 9)}'
放电温度过低二级告警 = f'9E02006{random.randint(7, 9)}'
压差过大一级告警值 = f'9F02000{random.randint(1, 3)}'
压差过大二级告警值 = f'A002000{random.randint(1, 3)}'
温差过大一级告警值 = f'A10200{random.randint(1, 3)}C'
温差过大二级告警值 = f'A20200{random.randint(1, 3)}C'
均衡开启电压 = f'A302000{random.randint(1, 3)}'
均衡开启压差 = f'A402000{random.randint(1, 3)}'
充电MOS管开关控制 = f'A502000{random.randint(0, 1)}'
放电MOS管开关控制 = f'A602000{random.randint(0, 1)}'
SOC设置 = f'A702000{random.randint(1, 3)}'
功率管温度保护告警 = f'A80200{random.randint(1, 9)}C'
软件版本号1 = 'A9025431'
软件版本号2 = 'AA023030'
软件版本号3 = 'AB025F36'
软件版本号4 = 'AC023131'
软件版本号5 = 'AD023133'
软件版本号6 = 'AE02325F'
软件版本号7 = 'AF023036'
软件版本号8 = 'B0024142'
硬件版本号1 = 'B1025431'
硬件版本号2 = 'B2023030'
硬件版本号3 = 'B3025F36'
硬件版本号4 = 'B4023131'
硬件版本号5 = 'B5023133'
硬件版本号6 = 'B602325F'
硬件版本号7 = 'B7023036'
硬件版本号8 = 'B8024142'
机器编码1 = 'B9025431'
机器编码2 = 'BA023030'
机器编码3 = 'BB025F36'
机器编码4 = 'BC023131'
机器编码5 = 'BD023133'
机器编码6 = 'BE02325F'
机器编码7 = 'BF023036'
机器编码8 = 'C0024142'
机器编码9 = 'C1024142'
机器编码10 = 'C2024142'
机器编码11 = 'C3024142'
机器编码12 = 'C4024142'
机器编码13 = 'C5024142'
机器编码14 = 'C6024142'
机器编码15 = 'C7024142'
机器编码16 = 'C8024142'
参数设置密码1 = 'C9023131'
参数设置密码2 = 'CA023131'
参数设置密码3 = 'CB023131'
生产日期1 = f'CC02{time16()[:4]}'
生产日期2 = f'CD02{time16()[4:8]}'
电池串数 = f'CE02000{random.randint(1, 9)}'
主动均衡开关 = f'CF02000{random.randint(0, 1)}'
主动均衡电流 = f'D002001{random.randint(6, 9)}'
通信方式 = f'D102000{random.randint(0, 1)}'
逆变器制造商 = f'D202000{random.randint(1, 9)}'
年月 = f'D402{time16()[:4]}'
日时 = f'D502{time16()[4:8]}'
分秒 = f'D602{time16()[8:]}'
强制启动开关 = f'D70200{random.randint(1, 9)}0'
加热开关 = f'D802000{random.randint(0, 1)}'

SOC过高告警值 = f'D9020B0{random.randint(1, 9)}'
SOC过高告警恢复值 = f'DA020B{random.randint(1, 9)}E'
SOC过低告警值 = f'DB020B{random.randint(1, 9)}E'
SOC过低告警恢复值 = f'DC020B{random.randint(1, 9)}E'
灯光告警或蜂鸣器告警 = f'DD02000{random.randint(0, 2)}'
电压校准 = f'DE0200{random.randint(7, 9)}E'
X加速度 = f'DF02000{random.randint(1, 9)}'
Y加速度 = f'E002000{random.randint(1, 9)}'
Z加速度 = f'E102000{random.randint(1, 9)}'
解锁状态控制 = f'E202000{random.randint(0, 1)}'
均衡截止电压 = f'E30200{random.randint(1, 3)}0'
加热开启温度 = f'E402006{random.randint(8, 9)}'
钥匙逻辑 = f'E50200A{random.randint(5, 6)}'
印规版本启用 = f'E602000{random.randint(0, 1)}'


# BMS数据长度 = f'{hex(int(len(TLV包数 + 单体电池电压1 + 单体电池电压2 + 电池温度1 + 电池温度2 + 电池总电压 + 电流数据 + SOC + 最高单体电压 + 最低单体电压 + 最高单体温度 + 最低单体温度 + 充放电状态 + 电池剩余容量 + 电池数量 + 电池温度传感器数量 + 电池使用循环次数 + 均衡状态 + 充电MOS状态 + 放电MOS状态 + 平均电压 + 压差 + 功率 + 故障状态1 + 故障状态2 + 故障状态3 + 故障状态4 + 剩余里程 + 主动均衡状态 + 均衡电流 + 均衡位置 + MOS温度 + 预留信号5 + 预留信号6 + 预留信号7 + 预留信号8 + 单体电池电压3 + 单体电池电压4 + SN码1 + SN码2 + SN码3 + SN码4 + SN码5 + SN码6 + SN码7 + SN码8 + SN码9 + SN码10 + SN码11 + SN码12 + 防盗状态 + 加热状态 + 充电年月 + 充电日时 + 充电分秒 + 放电年月 + 放电日时 + 放电分秒 + 额定容量 + 单体基准电压 + 采集板个数 + 采集板1单体个数 + 采集板2单体个数 + 采集板3单体个数 + 采集板1温度个数 + 采集板2温度个数 + 采集板3温度个数 + 电池类型 + 休眠等待时间 + 单体电压过高一级告警 + 单体电压过高二级告警 + 单体电压过低一级告警 + 单体电压过低二级告警 + 总压过高一级告警 + 总压过高二级告警 + 总压过低一级告警 + 总压过低二级告警 + 充电电流过高一级告警 + 充电电流过高二级告警 + 放电电流过高一级告警 + 放电电流过高二级告警 + 充电温度过高一级告警 + 充电温度过高二级告警 + 充电温度过低一级告警 + 充电温度过低二级告警 + 放电温度过高一级告警 + 放电温度过高二级告警 + 放电温度过低一级告警 + 放电温度过低二级告警 + 压差过大一级告警值 + 压差过大二级告警值 + 温差过大一级告警值 + 温差过大二级告警值 + 均衡开启电压 + 均衡开启压差 + 充电MOS管开关控制 + 放电MOS管开关控制 + SOC设置 + 功率管温度保护告警 + 软件版本号1 + 软件版本号2 + 软件版本号3 + 软件版本号4 + 软件版本号5 + 软件版本号6 + 软件版本号7 + 软件版本号8 + 硬件版本号1 + 硬件版本号2 + 硬件版本号3 + 硬件版本号4 + 硬件版本号5 + 硬件版本号6 + 硬件版本号7 + 硬件版本号8 + 机器编码1 + 机器编码2 + 机器编码3 + 机器编码4 + 机器编码5 + 机器编码6 + 机器编码7 + 机器编码8 + 机器编码9 + 机器编码10 + 机器编码11 + 机器编码12 + 机器编码13 + 机器编码14 + 机器编码15 + 机器编码16 + 参数设置密码1 + 参数设置密码2 + 参数设置密码3 + 生产日期1 + 生产日期2 + 电池串数 + 主动均衡开关 + 主动均衡电流 + 通信方式 + 逆变器制造商 + 年月 + 日时 + 分秒 + 强制启动开关 + 加热开关 + SOC过高告警值 + SOC过高告警恢复值 + SOC过低告警值 + SOC过低告警恢复值 + 灯光告警或蜂鸣器告警 + 电压校准 + X加速度 + Y加速度 + Z加速度 + 解锁状态控制 + 均衡截止电压 + 加热开启温度 + 钥匙逻辑 + 印规版本启用) / 2))[2:]}'.zfill(
#     4)
# print(BMS数据长度)
# 消息属性 = f'{hex(int(len(时间 + BMS协议版本指令 + BMS数据长度 + TLV包数 + 单体电池电压1 + 单体电池电压2 + 电池温度1 + 电池温度2 + 电池总电压 + 电流数据 + SOC + 最高单体电压 + 最低单体电压 + 最高单体温度 + 最低单体温度 + 充放电状态 + 电池剩余容量 + 电池数量 + 电池温度传感器数量 + 电池使用循环次数 + 均衡状态 + 充电MOS状态 + 放电MOS状态 + 平均电压 + 压差 + 功率 + 故障状态1 + 故障状态2 + 故障状态3 + 故障状态4 + 剩余里程 + 主动均衡状态 + 均衡电流 + 均衡位置 + MOS温度 + 预留信号5 + 预留信号6 + 预留信号7 + 预留信号8 + 单体电池电压3 + 单体电池电压4 + SN码1 + SN码2 + SN码3 + SN码4 + SN码5 + SN码6 + SN码7 + SN码8 + SN码9 + SN码10 + SN码11 + SN码12 + 防盗状态 + 加热状态 + 充电年月 + 充电日时 + 充电分秒 + 放电年月 + 放电日时 + 放电分秒 + 额定容量 + 单体基准电压 + 采集板个数 + 采集板1单体个数 + 采集板2单体个数 + 采集板3单体个数 + 采集板1温度个数 + 采集板2温度个数 + 采集板3温度个数 + 电池类型 + 休眠等待时间 + 单体电压过高一级告警 + 单体电压过高二级告警 + 单体电压过低一级告警 + 单体电压过低二级告警 + 总压过高一级告警 + 总压过高二级告警 + 总压过低一级告警 + 总压过低二级告警 + 充电电流过高一级告警 + 充电电流过高二级告警 + 放电电流过高一级告警 + 放电电流过高二级告警 + 充电温度过高一级告警 + 充电温度过高二级告警 + 充电温度过低一级告警 + 充电温度过低二级告警 + 放电温度过高一级告警 + 放电温度过高二级告警 + 放电温度过低一级告警 + 放电温度过低二级告警 + 压差过大一级告警值 + 压差过大二级告警值 + 温差过大一级告警值 + 温差过大二级告警值 + 均衡开启电压 + 均衡开启压差 + 充电MOS管开关控制 + 放电MOS管开关控制 + SOC设置 + 功率管温度保护告警 + 软件版本号1 + 软件版本号2 + 软件版本号3 + 软件版本号4 + 软件版本号5 + 软件版本号6 + 软件版本号7 + 软件版本号8 + 硬件版本号1 + 硬件版本号2 + 硬件版本号3 + 硬件版本号4 + 硬件版本号5 + 硬件版本号6 + 硬件版本号7 + 硬件版本号8 + 机器编码1 + 机器编码2 + 机器编码3 + 机器编码4 + 机器编码5 + 机器编码6 + 机器编码7 + 机器编码8 + 机器编码9 + 机器编码10 + 机器编码11 + 机器编码12 + 机器编码13 + 机器编码14 + 机器编码15 + 机器编码16 + 参数设置密码1 + 参数设置密码2 + 参数设置密码3 + 生产日期1 + 生产日期2 + 电池串数 + 主动均衡开关 + 主动均衡电流 + 通信方式 + 逆变器制造商 + 年月 + 日时 + 分秒 + 强制启动开关 + 加热开关 + SOC过高告警值 + SOC过高告警恢复值 + SOC过低告警值 + SOC过低告警恢复值 + 灯光告警或蜂鸣器告警 + 电压校准 + X加速度 + Y加速度 + Z加速度 + 解锁状态控制 + 均衡截止电压 + 加热开启温度 + 钥匙逻辑 + 印规版本启用) / 2))[2:]}'.zfill(
#     4)
# print(消息属性)
# c = get_xor(
#     消息ID + 消息属性 + 手机号 + 流水号 + 时间 + BMS协议版本指令 + BMS数据长度 + TLV包数 + 单体电池电压1 + 单体电池电压2 + 电池温度1 + 电池温度2 + 电池总电压 + 电流数据 + SOC + 最高单体电压 + 最低单体电压 + 最高单体温度 + 最低单体温度 + 充放电状态 + 电池剩余容量 + 电池数量 + 电池温度传感器数量 + 电池使用循环次数 + 均衡状态 + 充电MOS状态 + 放电MOS状态 + 平均电压 + 压差 + 功率 + 故障状态1 + 故障状态2 + 故障状态3 + 故障状态4 + 剩余里程 + 主动均衡状态 + 均衡电流 + 均衡位置 + MOS温度 + 预留信号5 + 预留信号6 + 预留信号7 + 预留信号8 + 单体电池电压3 + 单体电池电压4 + SN码1 + SN码2 + SN码3 + SN码4 + SN码5 + SN码6 + SN码7 + SN码8 + SN码9 + SN码10 + SN码11 + SN码12 + 防盗状态 + 加热状态 + 充电年月 + 充电日时 + 充电分秒 + 放电年月 + 放电日时 + 放电分秒 + 额定容量 + 单体基准电压 + 采集板个数 + 采集板1单体个数 + 采集板2单体个数 + 采集板3单体个数 + 采集板1温度个数 + 采集板2温度个数 + 采集板3温度个数 + 电池类型 + 休眠等待时间 + 单体电压过高一级告警 + 单体电压过高二级告警 + 单体电压过低一级告警 + 单体电压过低二级告警 + 总压过高一级告警 + 总压过高二级告警 + 总压过低一级告警 + 总压过低二级告警 + 充电电流过高一级告警 + 充电电流过高二级告警 + 放电电流过高一级告警 + 放电电流过高二级告警 + 充电温度过高一级告警 + 充电温度过高二级告警 + 充电温度过低一级告警 + 充电温度过低二级告警 + 放电温度过高一级告警 + 放电温度过高二级告警 + 放电温度过低一级告警 + 放电温度过低二级告警 + 压差过大一级告警值 + 压差过大二级告警值 + 温差过大一级告警值 + 温差过大二级告警值 + 均衡开启电压 + 均衡开启压差 + 充电MOS管开关控制 + 放电MOS管开关控制 + SOC设置 + 功率管温度保护告警 + 软件版本号1 + 软件版本号2 + 软件版本号3 + 软件版本号4 + 软件版本号5 + 软件版本号6 + 软件版本号7 + 软件版本号8 + 硬件版本号1 + 硬件版本号2 + 硬件版本号3 + 硬件版本号4 + 硬件版本号5 + 硬件版本号6 + 硬件版本号7 + 硬件版本号8 + 机器编码1 + 机器编码2 + 机器编码3 + 机器编码4 + 机器编码5 + 机器编码6 + 机器编码7 + 机器编码8 + 机器编码9 + 机器编码10 + 机器编码11 + 机器编码12 + 机器编码13 + 机器编码14 + 机器编码15 + 机器编码16 + 参数设置密码1 + 参数设置密码2 + 参数设置密码3 + 生产日期1 + 生产日期2 + 电池串数 + 主动均衡开关 + 主动均衡电流 + 通信方式 + 逆变器制造商 + 年月 + 日时 + 分秒 + 强制启动开关 + 加热开关 + SOC过高告警值 + SOC过高告警恢复值 + SOC过低告警值 + SOC过低告警恢复值 + 灯光告警或蜂鸣器告警 + 电压校准 + X加速度 + Y加速度 + Z加速度 + 解锁状态控制 + 均衡截止电压 + 加热开启温度 + 钥匙逻辑 + 印规版本启用)
# 异或校验 = f'{get_bcc(c)}'.zfill(2)
# print(异或校验)
# 协议尾 = '7E'
# data = 协议头 + 消息ID + 消息属性 + 手机号 + 流水号 + 时间 + BMS协议版本指令 + BMS数据长度 + TLV包数 + 单体电池电压1 + 单体电池电压2 + 电池温度1 + 电池温度2 + 电池总电压 + 电流数据 + SOC + 最高单体电压 + 最低单体电压 + 最高单体温度 + 最低单体温度 + 充放电状态 + 电池剩余容量 + 电池数量 + 电池温度传感器数量 + 电池使用循环次数 + 均衡状态 + 充电MOS状态 + 放电MOS状态 + 平均电压 + 压差 + 功率 + 故障状态1 + 故障状态2 + 故障状态3 + 故障状态4 + 剩余里程 + 主动均衡状态 + 均衡电流 + 均衡位置 + MOS温度 + 预留信号5 + 预留信号6 + 预留信号7 + 预留信号8 + 单体电池电压3 + 单体电池电压4 + SN码1 + SN码2 + SN码3 + SN码4 + SN码5 + SN码6 + SN码7 + SN码8 + SN码9 + SN码10 + SN码11 + SN码12 + 防盗状态 + 加热状态 + 充电年月 + 充电日时 + 充电分秒 + 放电年月 + 放电日时 + 放电分秒 + 额定容量 + 单体基准电压 + 采集板个数 + 采集板1单体个数 + 采集板2单体个数 + 采集板3单体个数 + 采集板1温度个数 + 采集板2温度个数 + 采集板3温度个数 + 电池类型 + 休眠等待时间 + 单体电压过高一级告警 + 单体电压过高二级告警 + 单体电压过低一级告警 + 单体电压过低二级告警 + 总压过高一级告警 + 总压过高二级告警 + 总压过低一级告警 + 总压过低二级告警 + 充电电流过高一级告警 + 充电电流过高二级告警 + 放电电流过高一级告警 + 放电电流过高二级告警 + 充电温度过高一级告警 + 充电温度过高二级告警 + 充电温度过低一级告警 + 充电温度过低二级告警 + 放电温度过高一级告警 + 放电温度过高二级告警 + 放电温度过低一级告警 + 放电温度过低二级告警 + 压差过大一级告警值 + 压差过大二级告警值 + 温差过大一级告警值 + 温差过大二级告警值 + 均衡开启电压 + 均衡开启压差 + 充电MOS管开关控制 + 放电MOS管开关控制 + SOC设置 + 功率管温度保护告警 + 软件版本号1 + 软件版本号2 + 软件版本号3 + 软件版本号4 + 软件版本号5 + 软件版本号6 + 软件版本号7 + 软件版本号8 + 硬件版本号1 + 硬件版本号2 + 硬件版本号3 + 硬件版本号4 + 硬件版本号5 + 硬件版本号6 + 硬件版本号7 + 硬件版本号8 + 机器编码1 + 机器编码2 + 机器编码3 + 机器编码4 + 机器编码5 + 机器编码6 + 机器编码7 + 机器编码8 + 机器编码9 + 机器编码10 + 机器编码11 + 机器编码12 + 机器编码13 + 机器编码14 + 机器编码15 + 机器编码16 + 参数设置密码1 + 参数设置密码2 + 参数设置密码3 + 生产日期1 + 生产日期2 + 电池串数 + 主动均衡开关 + 主动均衡电流 + 通信方式 + 逆变器制造商 + 年月 + 日时 + 分秒 + 强制启动开关 + 加热开关 + SOC过高告警值 + SOC过高告警恢复值 + SOC过低告警值 + SOC过低告警恢复值 + 灯光告警或蜂鸣器告警 + 电压校准 + X加速度 + Y加速度 + Z加速度 + 解锁状态控制 + 均衡截止电压 + 加热开启温度 + 钥匙逻辑 + 印规版本启用 + 异或校验 + 协议尾
#
# # data
# # 异或校验 = f'{get_bcc(get_xor(data1))}'.zfill(2)
# # print(异或校验)
# # data = f{异或校验.upper()}7E'
# # # #
# print(get_xor(data).upper())
# print(data.upper())

ntxt = input("请输入4个数字(空格分隔):")
nls = ntxt.split()
x0 = eval(nls[0])
y0 = eval(nls[1])
x1 = eval(nls[2])
y1 = eval(nls[3])
print(x0, x1, y0, y1)
print(pow(x1 - x0, 2))
print(pow(y1 - y0, 2))
r = pow(pow(x1 - x0, 2) + pow(y1 - y0, 2), 0.5)
print(r)
print("{:.2f}".format(r))
